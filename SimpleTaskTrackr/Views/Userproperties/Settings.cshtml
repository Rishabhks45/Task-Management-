@model SimpleTaskTrackr.Models.SimpleTaskTrackModel.Userproperty 
@{
    ViewData["Title"] = "Profile Settings";
}

<style>
    /* Profile Settings Styles */
    .settings-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .settings-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

    .settings-title {
        font-size: 24px;
        font-weight: 600;
        color: #2c3e50;
    }

    .settings-tabs {
        display: flex;
        margin-bottom: 30px;
        border-bottom: 1px solid #eee;
    }

    .settings-tab {
        padding: 12px 20px;
        font-weight: 500;
        color: #7f8c8d;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
    }

        .settings-tab.active {
            color: #3498db;
            border-bottom-color: #3498db;
        }

    /* Profile Form Styles */
    .profile-form {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        overflow: hidden;
    }

    .form-section {
        padding: 25px;
        border-bottom: 1px solid #f5f5f5;
    }

        .form-section:last-child {
            border-bottom: none;
        }

    .section-title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #2c3e50;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #34495e;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #3498db;
            outline: none;
        }

    .text-muted {
        color: #7f8c8d;
        font-size: 14px;
        margin-top: 5px;
    }

    /* Profile Picture Upload */
    .profile-picture {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .avatar-preview {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background-color: #f5f5f5;
        overflow: hidden;
        margin-right: 20px;
    }

        .avatar-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .upload-options {
        display: flex;
        flex-direction: column;
    }

    .upload-btn {
        background-color: #f5f5f5;
        color: #333;
        border: 1px solid #ddd;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        margin-bottom: 10px;
        transition: background-color 0.3s;
    }

        .upload-btn:hover {
            background-color: #e8e8e8;
        }

    .remove-btn {
        background: none;
        border: none;
        color: #e74c3c;
        cursor: pointer;
        padding: 5px 0;
        font-size: 14px;
        text-align: left;
    }

    /* Notification Preferences */
    .notification-option {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #f5f5f5;
    }

        .notification-option:last-child {
            border-bottom: none;
        }

    .notification-info {
        flex: 1;
    }

    .notification-title {
        font-weight: 500;
        margin-bottom: 5px;
    }

    .notification-desc {
        color: #7f8c8d;
        font-size: 14px;
    }

    /* Toggle Switch */
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
    }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 24px;
    }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .toggle-slider {
        background-color: #2ecc71;
    }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

    /* Buttons */
    .settings-actions {
        display: flex;
        justify-content: flex-end;
        padding: 20px 25px;
        background-color: #f9f9f9;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s;
        border: none;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2980b9;
        }

    .btn-outline {
        background-color: transparent;
        border: 1px solid #ddd;
        color: #7f8c8d;
        margin-right: 10px;
    }

        .btn-outline:hover {
            background-color: #f5f5f5;
        }
</style>

<div class="settings-container">
    <div class="settings-header">
        <h1 class="settings-title">Profile Settings is not connected to backend</h1>
    </div>

    <div class="settings-tabs">
        <div class="settings-tab active">Profile Information</div>
        <div class="settings-tab">Password</div>
        <div class="settings-tab">Notifications</div>
        <div class="settings-tab">Privacy</div>
    </div>

    <form asp-action="UpdateProfile" asp-controller="Settings" method="post" enctype="multipart/form-data" class="profile-form">
        @Html.AntiForgeryToken()

        <!-- Profile Information Section -->
        <div class="form-section">
            <h2 class="section-title">Profile Information</h2>

            <!-- Profile Picture -->
            <div class="profile-picture">
                <div class="avatar-preview">
                    @if (!string.IsNullOrEmpty(Model.Name))
                    {
                        <img src="~/UserIcon.jpg" alt="Profile Picture" />
                    }
                    else
                    {
                        <div style="width:100%; height:100%; display:flex; align-items:center; justify-content:center; background-color:#3498db; color:#fff; font-size:36px; font-weight:bold;">
                            @(Model.Name?[0].ToString().ToUpper() ?? "U")
                        </div>
                    }
                </div>
                <div class="upload-options">
                    <label class="upload-btn">
                        <input type="file" name="ProfilePicture" style="display:none;" accept="image/*" />
                        Upload new picture
                    </label>
                    @if (!string.IsNullOrEmpty("r"))
                    {
                        <button type="button" class="remove-btn">Remove picture</button>
                    }
                </div>
            </div>

            <!-- Name -->
            <div class="form-group">
                <label for="Name">Full Name</label>
                <input for="Name" class="form-control" />
                <span for="Name" class="text-danger"></span>
            </div>

            <!-- Email -->
            <div class="form-group">
                <label for="Email">Email Address</label>
                <input for="Email" class="form-control" />
                <span for="Email" class="text-danger"></span>
                <p class="text-muted">This email will be used for notifications and account recovery</p>
            </div>

            <!-- Phone -->
            <div class="form-group">
                <label for="Phone">Phone Number</label>
                <input for="Phone" class="form-control" />
                <span for="Phone" class="text-danger"></span>
            </div>

            <!-- Job Title -->
            <div class="form-group">
                <label for="JobTitle">Job Title</label>
                <input for="JobTitle" class="form-control" />
                <span for="JobTitle" class="text-danger"></span>
            </div>
        </div>

        <!-- Password Section -->
        <div class="form-section">
            <h2 class="section-title">Change Password</h2>

            <div class="form-group">
                <label for="CurrentPassword">Current Password</label>
                <input for="CurrentPassword" type="password" class="form-control" />
                <span for="CurrentPassword" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="NewPassword">New Password</label>
                <input for="NewPassword" type="password" class="form-control" />
                <span for="NewPassword" class="text-danger"></span>
                <p class="text-muted">Password must be at least 8 characters long and include a number and special character</p>
            </div>

            <div class="form-group">
                <label for="ConfirmPassword">Confirm New Password</label>
                <input for="ConfirmPassword" type="password" class="form-control" />
                <span for="ConfirmPassword" class="text-danger"></span>
            </div>
        </div>

       

        <!-- Form Actions -->
        <div class="settings-actions">
            <button type="button" class="btn btn-outline">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab switching functionality
            const tabs = document.querySelectorAll('.settings-tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');

                    // In a real application, you would show/hide appropriate sections
                    // or navigate to different settings pages
                });
            });

            // Profile picture upload preview
            const fileInput = document.querySelector('input[type="file"]');
            const avatarPreview = document.querySelector('.avatar-preview');

            fileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();

                    reader.onload = function(e) {
                        avatarPreview.innerHTML = `<img src="${e.target.result}" alt="Profile Preview" />`;
                    }

                    reader.readAsDataURL(this.files[0]);
                }
            });

            // Remove profile picture
            const removeBtn = document.querySelector('.remove-btn');
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    avatarPreview.innerHTML = `
                        <div style="width:100%; height:100%; display:flex; align-items:center; justify-content:center; background-color:#3498db; color:#fff; font-size:36px; font-weight:bold;">
                            @(Model.Name?[0].ToString().ToUpper() ?? "U")
                        </div>
                    `;

                    // Add a hidden input to signal the server to remove the profile picture
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'RemoveProfilePicture';
                    hiddenInput.value = 'true';
                    document.querySelector('form').appendChild(hiddenInput);
                });
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}